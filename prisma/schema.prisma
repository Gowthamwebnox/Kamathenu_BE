// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                     String                   @id @default(uuid())
  email                  String                   @unique
  password               String
  hasedPassword          String
  profile                String?
  firstName              String?
  lastName               String?
  number                 String?
  name                   String
  roleId                 String
  image                  String?
  isEmailVerified        Boolean                  @default(false)
  emailVerifiedAt        DateTime?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  reviews                Review[]
  addCart                AddCart[]
  wishlist               Wishlist[]
  sellerProfile          SellerProfile?
  Order                  Order[]
  OrderItem              OrderItem[]
  UserProductDescription UserProductDescription[]
}

model OTPTable {
  id        String    @id @default(uuid())
  email     String    @unique
  OTP       Int
  ExpiredAt DateTime?
  isUsed    Boolean   @default(false)
}

model Category {
  id               String    @id @default(uuid())
  name             String
  description      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[]
}

model Product {
  id                     String                   @id @default(uuid())
  categoryId             String
  name                   String
  description            String?
  isApproved             Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  aboutProduct           Json?
  sellerId               String
  price                  Decimal?
  
  category               Category                 @relation(fields: [categoryId], references: [id])
  seller                 SellerProfile            @relation(fields: [sellerId], references: [id])
  discounts              ProductDiscount[]
  images                 ProductImage[]
  // variants               ProductVariant[]
  reviews                Review[]
  productDetails         ProductDetails[]
  addCart                AddCart[]
  wishlist               Wishlist[]
  OrderItem              OrderItem[]
  UserProductDescription UserProductDescription[]

  @@index([sellerId])
  @@index([categoryId])
}

model UserProductDescription {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  user        user     @relation(fields: [userId], references: [id])

}

model ProductDiscount {
  id            String       @id @default(uuid())
  productId     String
  discountType  DiscountType
  discountValue Decimal
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  product       Product      @relation(fields: [productId], references: [id])
}

model ProductImage {
  id            String   @id @default(uuid())
  productId     String
  imageUrl      String[]
  imageLayerout String[]
  isPrimary     Boolean  @default(false)
  createdAt     DateTime @default(now())
  product       Product  @relation(fields: [productId], references: [id])
}

// model ProductVariant {
//   id                String   @id @default(uuid())
//   productId         String
//   variantType       String
//   variantValue      String
//   discountPrice     Decimal  @default(0)
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//   description       String?
//   price             Decimal
//   productVariantSKU String   @unique
//   stockQuantity     Int
//   title             String

//   product             Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
//   ProductVariantImage ProductVariantImage[]

//   @@index([productId])
// }

// model ProductVariantImage {
//   id               String         @id @default(uuid())
//   productVariantId String
//   imageUrl         String
//   isPrimary        Boolean        @default(false)
//   createdAt        DateTime       @default(now())
//   productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
// }

model Review {
  id         String   @id @default(uuid())
  productId  String
  userId     String
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  user       user     @relation(fields: [userId], references: [id])
}

model ProductDetails {
  id                String   @id @default(uuid())
  productId         String
  designInformation Json
  designDeatils     Json
  packageDetails    Json
  deliveryDetails   Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  product           Product  @relation(fields: [productId], references: [id])
}

model AddCart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model SellerProfile {
  id               String      @id @default(uuid())
  userId           String      @unique
  profileImage     String?
  sellerName       String?
  storeName        String
  storeDescription String?
  bankAccountId    String?     @unique
  upiId            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  address          String?     @db.VarChar
  // location         Unsupported("geography")?
  documents        String[]
  gstn             String?     @unique
  pincode          String?
  // status           SellerStatus              @default(ON_HOLD)
  bankAccount      BankAccountDetails?
  products         Product[]
  user             user        @relation(fields: [userId], references: [id])
  OrderItem        OrderItem[]
  // @@index([location], map: "sellerprofile_location_gix", type: Gist)
}


  model BankAccountDetails {
  id                String        @id @default(uuid())
  accountHolderName String
  accountNumber     String
  bankName          String
  ifscCode          String
  branchName        String?
  accountType       String?
  sellerProfileId   String        @unique
  isVerified        Boolean       @default(false)
  verificationDate  DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  sellerProfile     SellerProfile @relation(fields: [sellerProfileId], references: [id])

  @@index([accountNumber])
  @@index([ifscCode])
}
model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  totalAmount   Decimal
  orderStatus   OrderStatus   @default(pending)
  paymentRefId  String?
  paymentStatus PaymentStatus @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          user          @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payments      Payment[]
}

model OrderItem {
  id              String          @id @default(uuid())
  orderId         String
  productId       String
  sellerId        String
  priceAtPurchase Decimal
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?
  status          OrderItemStatus @default(pending)
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id])
  seller          SellerProfile   @relation(fields: [sellerId], references: [id])
  User            user?           @relation(fields: [userId], references: [id])
  

  @@index([orderId])
  @@index([productId])
  @@index([sellerId])
  @@index([userId])
}

model Payment {
  id                    String               @id @default(uuid())
  orderId               String
  paymentGateway        String
  paymentStatus         PaymentGatewayStatus
  paymentGatewayOrderId String?
  transactionId         String?
  amount                Decimal
  paymentDate           DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  order                 Order                @relation(fields: [orderId], references: [id])
}

enum PaymentGatewayStatus {
  pending
  completed
  failed
  authorized
  refunded
}

enum OrderStatus {
  pending
  approved
  rejected
}

enum PaymentStatus {
  pending
  paid
  refunded
  authorized
  failed
}

enum OrderItemStatus {
  pending
  shipped
  delivered
  cancelled
}

enum DiscountType {
  percentage
  amount
}
